// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package facepb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	UserInfo
	Token
	Reply
*/
package facepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserInfo struct {
	Nickname  string `protobuf:"bytes,1,opt,name=nickname" json:"nickname,omitempty"`
	Cellphone string `protobuf:"bytes,2,opt,name=cellphone" json:"cellphone,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserInfo) GetCellphone() string {
	if m != nil {
		return m.Cellphone
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type Token struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Reply struct {
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Reply) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*UserInfo)(nil), "facepb.UserInfo")
	proto.RegisterType((*Token)(nil), "facepb.Token")
	proto.RegisterType((*Reply)(nil), "facepb.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PassportRpc service

type PassportRpcClient interface {
	// Sends a greeting
	UserAdd(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Reply, error)
	UserAuth(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Reply, error)
}

type passportRpcClient struct {
	cc *grpc.ClientConn
}

func NewPassportRpcClient(cc *grpc.ClientConn) PassportRpcClient {
	return &passportRpcClient{cc}
}

func (c *passportRpcClient) UserAdd(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/facepb.PassportRpc/UserAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportRpcClient) UserAuth(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/facepb.PassportRpc/UserAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PassportRpc service

type PassportRpcServer interface {
	// Sends a greeting
	UserAdd(context.Context, *UserInfo) (*Reply, error)
	UserAuth(context.Context, *Token) (*Reply, error)
}

func RegisterPassportRpcServer(s *grpc.Server, srv PassportRpcServer) {
	s.RegisterService(&_PassportRpc_serviceDesc, srv)
}

func _PassportRpc_UserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportRpcServer).UserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/facepb.PassportRpc/UserAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportRpcServer).UserAdd(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportRpc_UserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportRpcServer).UserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/facepb.PassportRpc/UserAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportRpcServer).UserAuth(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _PassportRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "facepb.PassportRpc",
	HandlerType: (*PassportRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserAdd",
			Handler:    _PassportRpc_UserAdd_Handler,
		},
		{
			MethodName: "UserAuth",
			Handler:    _PassportRpc_UserAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x4b, 0x4c, 0x4e, 0x2d, 0x48, 0x52, 0x8a, 0xe2,
	0xe2, 0x08, 0x2d, 0x4e, 0x2d, 0xf2, 0xcc, 0x4b, 0xcb, 0x17, 0x92, 0xe2, 0xe2, 0xc8, 0xcb, 0x4c,
	0xce, 0xce, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3, 0x85, 0x64,
	0xb8, 0x38, 0x93, 0x53, 0x73, 0x72, 0x0a, 0x32, 0xf2, 0xf3, 0x52, 0x25, 0x98, 0xc0, 0x92, 0x08,
	0x01, 0x21, 0x11, 0x2e, 0xd6, 0xd4, 0xdc, 0xc4, 0xcc, 0x1c, 0x09, 0x66, 0xb0, 0x0c, 0x84, 0xa3,
	0x24, 0xcb, 0xc5, 0x1a, 0x92, 0x9f, 0x9d, 0x9a, 0x07, 0x92, 0x2e, 0x01, 0x31, 0xa0, 0xa6, 0x42,
	0x38, 0x4a, 0x8a, 0x5c, 0xac, 0x41, 0xa9, 0x05, 0x39, 0x95, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9,
	0xc5, 0xc5, 0x89, 0xe9, 0x10, 0x6b, 0x79, 0x82, 0x60, 0x5c, 0xa3, 0x74, 0x2e, 0xee, 0x80, 0xc4,
	0xe2, 0xe2, 0x82, 0xfc, 0xa2, 0x92, 0xa0, 0x82, 0x64, 0x21, 0x1d, 0x2e, 0x76, 0x90, 0x63, 0x1d,
	0x53, 0x52, 0x84, 0x04, 0xf4, 0x20, 0x1e, 0xd0, 0x83, 0xb9, 0x5e, 0x8a, 0x17, 0x26, 0x02, 0x36,
	0x54, 0x89, 0x41, 0x48, 0x0b, 0xe2, 0x35, 0xc7, 0xd2, 0x92, 0x0c, 0x21, 0xb8, 0x24, 0xd8, 0x41,
	0x18, 0x6a, 0x93, 0xd8, 0xc0, 0xa1, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x9d, 0xff,
	0xfb, 0x22, 0x01, 0x00, 0x00,
}
